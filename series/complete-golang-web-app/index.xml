<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Complete Golang Web App on Anthony Alaribe</title>
    <link>http://tonyalaribe.github.io/series/complete-golang-web-app/</link>
    <description>Recent content in Complete Golang Web App on Anthony Alaribe</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <author>Anthony Alaribe</author>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Sat, 14 Feb 2015 09:03:34 UTC</lastBuildDate>
    <atom:link href="http://tonyalaribe.github.io/series/complete-golang-web-app/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Complete Golang Web app: Introduction</title>
      <link>http://tonyalaribe.github.io/post/golang-webapp-1/</link>
      <pubDate>Sat, 14 Feb 2015 09:03:34 UTC</pubDate>
      <author>Anthony Alaribe</author>
      <guid>http://tonyalaribe.github.io/post/golang-webapp-1/</guid>
      <description>&lt;p&gt;So, I joined the line of backend developers who have tried out golang. To learn
web development in golang, I set out to develop
&lt;a href=&#34;http://kaku-go.herokuapp.com&#34;&gt;kaku.com.ng&lt;/a&gt; in golang. Along the way, I learnt:
* To implement facebook authentication in golang
* To do file storage on AWS from golang
* To host a golang web app on heroku
* To implement an autocompletion backend that returns JSON
* To implement random naming of files to be uploaded
* To use mongo db via the &lt;a href=&#34;https://labix.org/mgo&#34;&gt;mgo&lt;/a&gt;
* To implement pagination with a mongo db backend
* To manage sessions in golang&lt;/p&gt;

&lt;p&gt;Over the course of this series, I&amp;rsquo;d be sharing how i achieved all these. If you
feel the methods I used could be improved on, please feel free to share your
solutions in the comments.&lt;/p&gt;

&lt;p&gt;Before I start, I&amp;rsquo;d give a background on the web app; kaku.com is a place and
events discovery service. Any user can sign in using their facebook accounts and
add a place. Other users can search for places using three search boxed. Users
view these places and post reviews.&lt;/p&gt;

&lt;p&gt;On the backend, I made use of no web framework; No martini, No gin, No Revel. I
didnt even use any routing library. Turns out that net/http is more than
capable, with a little extra effort. Coming from a python django background, it
felt like relearning how the web works; Requests and Responses.&lt;/p&gt;

&lt;p&gt;For Golang, I&amp;rsquo;ve ended up with a mindset that most external dependencies add
thousands of lines to your codebase, and that is equivalent to extra effort
maintaining and keeping track of, for features that you could have easily
achieved with a little effort and a few extra lines of code. For example,
routing; A little bit of string manipulation and regular expressions could save
you huge dependencies.&lt;/p&gt;

&lt;p&gt;My entire codebase is available at
&lt;a href=&#34;http://github.com/tonyalaribe/kaku-go&#34;&gt;github/tonyalaribe/kaku-go&lt;/a&gt; for the
golang backend and templates, but if you like how the frontend looks and want to
see what&amp;rsquo;s happening behind the scenes, the HTML, SASS and Javascript files are
available at &lt;a href=&#34;http://github.com/tonyalaribe/kaku&#34;&gt;github.com/tonyalaribe/kaku&lt;/a&gt;.
Running bower install and npm install should install all the gulp files,
converting it into the complete dev environment.&lt;/p&gt;

&lt;p&gt;Feel free to clone the repositories and hack till your hearts content.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>